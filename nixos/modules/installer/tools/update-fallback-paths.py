#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python3

from urllib.request import Request, urlopen  # Python 3
import urllib.error
import argparse
import json
from pathlib import Path

NATIVE_BUILDS = [
    "x86_64-linux",
    "i686-linux",
    "aarch64-linux",
    "x86_64-darwin",
    "aarch64-darwin",
]
CROSS_BUILDS = {"riscv64-unknown-linux-gnu": "riscv64-linux"}
HYDRA_URL = "https://hydra.nixos.org"
SCRIPT_DIR = Path(__file__).parent


class Error(Exception):
    pass


def get_store_path(eval_id: int, job_name: str) -> str:
    url = f"{HYDRA_URL}/eval/{eval_id}/job/{job_name}"
    req = Request(url)
    req.add_header("Accept", "application/json")
    try:
        build_info = json.load(urlopen(req))
    except urllib.error.HTTPError as e:
        raise Error(f"Failed to fetch {url}: {e}")
    return build_info["buildoutputs"]["out"]["path"]


def write_fallback_paths(eval_id: int) -> None:
    content = (
        f"# Generated by update-fallback-paths.py based on {HYDRA_URL}/eval/{eval_id}\n"
    )
    content += "{\n"
    for name in NATIVE_BUILDS:
        hash = get_store_path(eval_id, f"build.nix.{name}")
        content += f'  {name} = "{hash}";\n'
    for cross_name, native_name in CROSS_BUILDS.items():
        hash = get_store_path(eval_id, f"buildCross.nix.{cross_name}.x86_64-linux")
        content += f'  {native_name} = "{hash}";\n'
    content += "}\n"
    (SCRIPT_DIR / "nix-fallback-paths.nix").write_text(content)


def main() -> None:
    arg_parser = argparse.ArgumentParser(
        description="Update the fallback paths in the Nixpkgs repository"
    )

    arg_parser.add_argument(
        "eval_id",
        type=int,
        help="The evaluation ID. Got to https://hydra.nixos.org/jobset/nix and select the release jobset. i.e. https://hydra.nixos.org/jobset/nix/maintenance-2.24",
    )
    args = arg_parser.parse_args()
    try:
        write_fallback_paths(args.eval_id)
    except Error as e:
        print(e)
        exit(1)


if __name__ == "__main__":
    main()
